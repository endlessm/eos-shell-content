#!/usr/bin/gjs
// -*- mode: js; js-indent-level: 4; indent-tabs-mode: nil -*-

// Script to select the app server
//
// Usage:
//   eos-select-app-server [default | <app server>]
//
// For example:
//   eos-select-app-server              -- prompts user to select app server
//   eos-select-app-server default      -- reset to the default app server
//   eos-select-app-server staging-dev  -- select the staging-dev server

const Gio = imports.gi.Gio;
const GLib = imports.gi.GLib;

const CONFIG_PATH ='/usr/etc/EndlessOS';

const selectServer = function() {
    let command = 'zenity --list --title="App server" --text="Select an option and hit OK\n(Cancel to keep existing configuration)" --radiolist --hide-header --column=button --column=selection TRUE default FALSE staging-dev FALSE production';

    let response;
    try {
        response = GLib.spawn_command_line_sync(command);
    } catch (e) {
        logError(e, 'Error executing \'' + localizedExec + '\'');
        return null;
    }

    const STATUS = 3;
    const SELECTION = 1;
    let status = response[STATUS];
    let server;
    if (status == 0) {
        // User hit OK
        let selection = response[SELECTION];
        // Convert to string and trim the new line
        server = String(selection).trim();
    } else {
        // User canceled
        server = null;
    }
    return server;
}
    
const getServer = function(args) {
    let server;
    if (args.length == 0) {
        server = selectServer();
    } else if (args.length == 1) {
        server = args[0];
    } else {
        throw new Error('Invalid command-line: only 0 or 1 argument allowed');
    }
    return server;
}

let server = getServer(ARGV);

if (server) {
    // Ensure that /etc/EndlessOS exists
    try {
        GLib.mkdir_with_parents(CONFIG_PATH, parseInt('0755', 8));
    } catch (e) {
        logError(e,
            'Error creating config directory \'' + CONFIG_PATH + '\'');
    }

    // Read in existing config file
    let configFilePath = CONFIG_PATH + '/app-server.conf';
    let configFile = Gio.File.new_for_path(configFilePath);
    let configKeyFile = new GLib.KeyFile();
    let saveOriginal = false;

    try {
        configKeyFile.load_from_file(configFilePath,
                                     GLib.KeyFileFlags.KEEP_COMMENTS |
                                     GLib.KeyFileFlags.KEEP_TRANSLATIONS);
        saveOriginal = true;
    } catch (e) {
        if (!e.matches(GLib.FileError, GLib.FileError.NOENT))
            logError(e, 'Config file \'' + configFilePath +
                        '\' exists but cannot be read');
    }

    // Check if the current version of the file was generated by this script
    if (saveOriginal) {
        try {
            let generated = configKeyFile.get_boolean("AppServer", "Generated");
            if (generated) {
                saveOriginal = false;
            }
        } catch (e) {
            if (!e.matches(GLib.KeyFileError, GLib.KeyFileError.KEY_NOT_FOUND)) {
                logError(e, 'Failed to determine if config file has been modified');
                saveOriginal = false;
            }
        }
    }

    // Save original config
    if (saveOriginal) {
        let backupFilePath = configFilePath + '.orig';
        let backupFile = Gio.File.new_for_path(backupFilePath);
        if (!GLib.file_test(backupFilePath, GLib.FileTest.EXISTS)) {
            try {
                configFile.move(backupFile, Gio.FileCopyFlags.NONE, null, null, null)
            } catch (e) {
                logError(e, 'Failed to save original app server at \'' +
                            backupFilePath + '\'');
            }
        }
    }

    configKeyFile.set_string("AppServer", "AppServerName", server);
    configKeyFile.set_boolean("AppServer", "Generated", true);

    // Write out new config file
    let configOutputFile = Gio.File.new_for_path(configFilePath);
    let configFileData = configKeyFile.to_data()[0];
    try {
        configFile.replace_contents(configFileData, null, false,
            Gio.FileCreateFlags.NONE, null);
    } catch (e) {
        logError(e,
            'Error saving app server to \'' + configFilePath + '\'');
    }
}
