#!/usr/bin/perl -w
# -*- mode: Perl; perl-indent-level: 8; indent-tabs-mode: t -*-

=head1 NAME

dh_eoscontent - merge Endless content into packages

=cut

use strict;
use Cwd 'abs_path';
use Debian::Debhelper::Dh_Lib;
use Dpkg::Control::Info;
use JSON;

=head1 SYNOPSIS

B<dh_eoscontent> [S<I<debhelper options>>]

=head1 DESCRIPTION

B<dh_eoscontent> is a debhelper program that merges content from the
eos-shell-content-dev packages into the package. Currently this applies
only to desktop files.

=cut

init();

# Parse out content.json
my $filename = '/usr/share/eos-shell-content/content.json';
my $json_text = do {
	open(CONTENT, "<:encoding(UTF-8)", $filename) ||
	    error("cannot read $filename: $!\n");
	local $/;
	<CONTENT>;
};
my $content = JSON->new->utf8->decode($json_text);

# Parse debian/control file
my $pkg_info = Dpkg::Control::Info->new();

# Find the app ID from the Eos-Appid control field
sub eos_app_id {
	my $name=shift;

	# Get the package, main package and source package stanzas
	my $pkg=$pkg_info->get_pkg_by_name($name);
	my $main=$pkg_info->get_pkg_by_idx(1);
	my $src=$pkg_info->get_source();

	# The app ID is can be found from the Eos-Appid field starting
	# in the current package, then the main package and finally the
	# source package. If none are found, the package name is used.
	# Search for both a real field and a custom field (prefixed with
	# X[CBS]*-).
	return $pkg->{'Eos-Appid'} ||
	    $pkg->get_custom_field('Eos-Appid') ||
	    $main->{'Eos-Appid'} ||
	    $main->get_custom_field('Eos-Appid') ||
	    $src->{'Eos-Appid'} ||
	    $src->get_custom_field('Eos-Appid') ||
	    $pkg->{'Package'};
}

sub app_content {
	my $app_id=shift;
	my $package=shift;
	my $alt_id;

	# If this app ID has a language suffix, also try with the suffix
	# removed.
	if ($app_id =~ /(.*)-([a-z][a-z](_[A-Z][A-Z])?)$/) {
		$alt_id = $1;
		verbose_print("Also trying alternate ID $alt_id");
	}

	for my $app (@$content) {
		return $app if $app_id eq $app->{'application-id'};
		if (defined($alt_id)) {
			return $app if $alt_id eq $app->{'application-id'};
		}
	}
}

sub app_desktop_file {
	my $app_id=shift;
	my $tmp=shift;

	# See if this package has the desktop file
	my $desktop = $tmp . '/usr/share/applications/' . $app_id
	    . '.desktop';
	verbose_print("Checking for desktop file $desktop");
	if (-l $desktop) {
		my $link = readlink($desktop);
		if ($link =~ /^\//) {
			# If the symlink is absolute, make it relative
			# to the tmpdir
			$desktop = $tmp . $link;
		} else {
			# Resolve it to an absolute path
			$desktop = abs_path($desktop);
		}
		verbose_print("Resolved symlink to $desktop");
	}
	return $desktop if (-e $desktop);
}

sub app_appdata_file {
	my $app_id=shift;
	my $tmp=shift;

	# See if this package has the appdata file
	my @appdata_dirs = ('metainfo', 'appdata');
	foreach my $appdata_dir (@{appdata_dirs}) {
		my $appdata = $tmp . '/usr/share/' . $appdata_dir . '/' . $app_id
		    . '.appdata.xml';
		verbose_print("Checking for app-data file $appdata");

		next unless (-e $appdata);

		if (-l $appdata) {
			my $link = readlink($appdata);
			if ($link =~ /^\//) {
				# If the symlink is absolute, make it relative
				# to the tmpdir
				$appdata = $tmp . $link;
			} else {
				# Resolve it to an absolute path
				$appdata = abs_path($appdata);
			}
		}

		verbose_print("Resolved symlink to $appdata");
		return $appdata;
	}
}

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmp=tmpdir($package);
	my $app_id=eos_app_id($package);
	my $content_id;
	my $app_data;
	my $app_data_file;
	my $desktop;

	next if not defined $app_id;

	$app_data = app_content($app_id, $package);
	next if not $app_data;
	$content_id = $app_data->{'application-id'};
	verbose_print("Found content for app $content_id");

	$desktop = app_desktop_file($app_id, $tmp);
	if ($desktop) {
		verbose_print("Updating desktop file $desktop");
		doit("eos-content-merge", "-i", $content_id, "-d", $desktop);
	}

	$app_data_file = app_appdata_file($app_id, $tmp);
	if ($app_data_file) {
		verbose_print("Updating appdata file $app_data_file");
		doit("eos-content-merge", "-i", $content_id, "-a", $app_data_file);
	}
}

=head1 SEE ALSO

L<debhelper(7)>

This program is a part of eos-shell-content.

=head1 AUTHOR

Dan Nicholson <nicholson@endlessm.com>

=cut
